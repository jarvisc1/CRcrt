#
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_value <- which(trt_values != trt_value)
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt)
p_intersects
#
}
crt_buff(p.utm, b.utm, trt_value = 1)
st_within(p.utm, b.utm)
b.utm$ID
st_within(p.utm, b.utm[b.utm$ID==1,])
st_within(p.utm, b.utm[b.utm$ID==5,])
st_within(p.utm, b.utm[b.utm$ID==5,], sparse = F)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_value <- which(trt_values != trt_value)
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, spares = FALSE)
p_intersects
#
}
crt_buff(p.utm, b.utm, trt_value = 1)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = FALSE)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_value <- which(trt_values != trt_value)
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = FALSE)
p_intersects
#
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = FALSE)
p_intersects
#
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
p_intersects
#
}
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
trt_loc <- which(names(poly_trt) == trt)
id_loc <- which(names(poly_trt)  == id)
names(poly_trt)[trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
p_intersects
#
}
crt_buff(p.utm, b.utm, trt_value = 1)
st_within(p.utm, b.utm[b.utm$ID==5,], sparse = F)
st_within(p.utm, b.utm[b.utm$ID==5:6,], sparse = F)
st_within(p.utm, b.utm[b.utm$ID==1:2,], sparse = T)
View(st_within(p.utm, b.utm[b.utm$ID==1:2,], sparse = T))
x1 <- st_within(p.utm, b.utm[b.utm$ID==1:2,], sparse = T)
class(x1)
x1
p.utm$x1 <- x1
p.utm$x1 <- x1[1]
p.utm$x1 <- x1[[1]]
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
# create number id and trt vars
points[paste0(id,  "_", distance)] <- p_intersects[[1]]
#points[paste0(trt, "_", distance)] <-
points
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
crt_buff <- function(points, poly, buffer, trt = "trt", trt_value,  distance = 50, id = "ID"){
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
# create number id and trt vars
points[paste0(id,  "_", distance)] <- ifelse(is.na(p_intersects[[1]]),
points[[id]],
p_intersects[[1]]
#points[paste0(trt, "_", distance)] <-
points
}
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
# create number id and trt vars
points[paste0(id,  "_", distance)] <- ifelse(is.na(p_intersects[[1]]),
points[[id]],
p_intersects[[1]])
#points[paste0(trt, "_", distance)] <-
points
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Get unique trt_values
# Should check if trt var is in points and polygons
# And is of length two
trt_values <- unique(poly[[trt]])
dim(trt_values)
not_trt_loc <- which(trt_values != trt_value)
not_trt_value <- trt_values[not_trt_loc]
# Define the polygon for selected  clusters
# And the points in the non_selected clusters
poly_trt <- poly[poly[[trt]]  == trt_value, ]
points_not_trt <- points[points[[trt]]  == not_trt_value, ]
# Change names to represent the distance
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
buff_trt <- sf::st_buffer(poly_trt, distance)
# Check which points intersect with the polygon
p_intersects <- sf::st_within(points_not_trt, buff_trt, sparse = T)
# create number id and trt vars
is.na(p_intersects[[1]])
# points[paste0(id,  "_", distance)] <- ifelse(is.na(p_intersects[[1]]),
#                                              points[[id]],
#                                              p_intersects[[1]])
#points[paste0(trt, "_", distance)] <-
# points
}
crt_buff(p.utm, b.utm, trt_value = 1)
x1[[1]]
x1[1]
x1[,1]
p.utm$ID
str(x1)
dim(x1)
x1[1.]
x1[1,]
View(st_within(p.utm, b.utm[b.utm$ID==1:2,], sparse = T))
x1 <- st_within(p.utm, b.utm[b.utm$ID==1:2,], sparse = T)
x1
x1 <- st_within(p.utm, b.utm[b.utm$ID==2:3,], sparse = T)
x1
x1 <- st_intersects(p.utm, b.utm[b.utm$ID==2:3,], sparse = T)
x1
x1 <- st_within(p.utm, b.utm[b.utm$ID==2:3,], sparse = T)
table(x1)
diag()
diag(x1)
length(x1)
lengths(x1)
lengths(x1)>0
st_is_within_distance(p.utm, b.utm[b.utm$ID==2:3,], dist = 100)
x1 <- st_is_within_distance(p.utm, b.utm[b.utm$ID==2:3,], dist = 100)
x1
str(x1)
x1 <- st_is_within_distance(p.utm, b.utm[b.utm$ID==2:3,], dist = 2000)
str(x1)
x1
unique(b.utm$ID)
name(b.utm)
names(b.utm)
bb = b.utm[c("ID", "trt"),]
bb
bb = b.utm[ , c("ID", "trt")]
bb
st_join(p.utm, bb[bb$id== 2:3])
st_join(p.utm, bb[bb$id== 1:3])
bb = data.frame(id_50 = b.utm$ID, trt_50 = b.utm$trt))
bb
bb = data.frame(id_50 = b.utm$ID, trt_50 = b.utm$trt)
bb
library(dplyr)
bb = b.utm %>%
select(id_50 = id,
trt_50 = trt)
library(dplyr)
bb = b.utm %>%
select(id_50 = id,
trt_50 = trt)
bb = b.utm %>%
select("id_50" = id,
"trt_50" = trt)
bb = b.utm %>%
select(id,
trt)
b.utm
st_join(p.utm, bb[bb$id== 1:3])
bb = b.utm[c("id", "trt")]
bb = b.utm[,c("id", "trt")]
bb = b.utm[,c("ID", "trt")]
bb
names(bb)
names(bb)[1:2] <- c("id_50", "trt_50")
st_join(p.utm, bb[bb$id_50== 1:3])
st_join(p.utm, bb[bb$id_50== 2:3])
bb[bb$id_50== 2:3]
bb[bb$id_50== 2:3,]
bb$id_50
st_join(p.utm, bb[bb$id_50== 1:2])
st_join(p.utm, bb[bb$id_50 %in% 1:2])
st_join(p.utm, bb[bb$id_50 %in% 2:3])
st_join(p.utm, bb[bb$id_50 %in% 2:3,])
st_join(p.utm, bb[bb$id_50 %in% 2:3,], join = st_within_distance, dis = 2000)
st_join(p.utm, bb[bb$id_50 %in% 2:3,], join = st_is_within_distance, dis = 2000)
st_join(p.utm, bb[bb$id_50 %in% 2:3,], join = st_is_within_distance, dis = 20)
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Change names to represent the distance
poly <- poly[, c(trt, id)])
poly_trt <- poly[poly[[trt]]  == trt_value, ]
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
}
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Change names to represent the distance
poly <- poly[, c(trt, id)]
poly_trt <- poly[poly[[trt]]  == trt_value, ]
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
names(poly_trt)[poly_trt_loc] <- paste0(trt, "_", distance)
names(poly_trt)[poly_id_loc]  <- paste0(id,  "_", distance)
new_points <- st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
new_points
}
crt_buff(p.utm, b.utm, trt_value = 1)
crt_buff(p.utm, b.utm, trt_value = 0)
crt_buff(p.utm, b.utm, trt_value = 0, distance = 500)
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Filter to just get relevant clusters
poly <- poly[, c(trt, id)]
poly_trt <- poly[poly[[trt]]  == trt_value, ]
# Identify where the names are
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
# Define new names based on distance
new_trt_name <- paste0(trt, "_", distance)
new_id_name  <- paste0(id,  "_", distance)
names(poly_trt)[poly_trt_loc] <- new_trt_name
names(poly_trt)[poly_id_loc]  <- new_id_name
new_points <- st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
new_points[new_trt_name] <- ifelse(is.na(new_points[new_trt_name],
new_points[trt],
new_points[new_trt_name]
)
}
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Filter to just get relevant clusters
poly <- poly[, c(trt, id)]
poly_trt <- poly[poly[[trt]]  == trt_value, ]
# Identify where the names are
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
# Define new names based on distance
new_trt_name <- paste0(trt, "_", distance)
new_id_name  <- paste0(id,  "_", distance)
names(poly_trt)[poly_trt_loc] <- new_trt_name
names(poly_trt)[poly_id_loc]  <- new_id_name
new_points <- st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
new_points[[new_trt_name]] <- ifelse(is.na(new_points[[new_trt_name]]),
new_points[[trt]],
new_points[[new_trt_name]]
)
}
crt_buff(p.utm, b.utm, trt_value = 0, distance = 500)
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Filter to just get relevant clusters
poly <- poly[, c(trt, id)]
poly_trt <- poly[poly[[trt]]  == trt_value, ]
# Identify where the names are
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
# Define new names based on distance
new_trt_name <- paste0(trt, "_", distance)
new_id_name  <- paste0(id,  "_", distance)
names(poly_trt)[poly_trt_loc] <- new_trt_name
names(poly_trt)[poly_id_loc]  <- new_id_name
new_points <- st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
new_points[[new_trt_name]] <- ifelse(is.na(new_points[[new_trt_name]]),
new_points[[trt]],
new_points[[new_trt_name]]
)
new_points
}
crt_buff(p.utm, b.utm, trt_value = 0, distance = 500)
crt_buff <- function(points,
poly,
buffer,
trt = "trt",
trt_value,
distance = 50,
id = "ID"){
# Filter to just get relevant clusters
poly <- poly[, c(trt, id)]
poly_trt <- poly[poly[[trt]]  == trt_value, ]
# Identify where the names are
poly_trt_loc    <- which(names(poly_trt) == trt)
poly_id_loc     <- which(names(poly_trt) == id)
# Define new names based on distance
new_trt_name <- paste0(trt, "_", distance)
new_id_name  <- paste0(id,  "_", distance)
names(poly_trt)[poly_trt_loc] <- new_trt_name
names(poly_trt)[poly_id_loc]  <- new_id_name
new_points <- st_join(points, poly_trt, join = st_is_within_distance, dist = distance)
new_points[[new_trt_name]] <- ifelse(is.na(new_points[[new_trt_name]]),
new_points[[trt]],
new_points[[new_trt_name]]
)
new_points[[new_id_name]] <- ifelse(is.na(new_points[[new_id_name]]),
new_points[[id]],
new_points[[new_id_name]]
)
new_points
}
crt_buff(p.utm, b.utm, trt_value = 0, distance = 500)
crt_buff(p.utm, b.utm, trt_value = 0, distance = 10)
crt_buff(p.utm, b.utm, trt_value = 0, distance = 2000)
devtools::document()
devtools::document()
